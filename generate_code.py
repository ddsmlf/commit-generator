import os
import subprocess
import time
import re
from langchain_ollama import OllamaLLM
import argparse
import random
import sys

# Constants
REPO_PATH = "/home/melissa/Documents/automat-gh/AUTO"
MODEL_NAME = "deepseek-r1"

# Argument Parser
def parse_arguments():
    parser = argparse.ArgumentParser(description='Generate or modify a Python script with Ollama')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-g', '--generate', action='store_true', help='Generate a Python script')
    group.add_argument('-f', '--fix', action='store_true', help='Fix an existing Python script')
    group.add_argument('-d', '--doc', action='store_true', help='Generate documentation for a script')
    group.add_argument('-c', '--clean', action='store_true', help='Push for repo cleanup')
    group.add_argument('-u', '--update', action='store_true', help='Update the code generation model')
    return parser.parse_args()

# Git Operations
def git_operations(commit_message):
    subprocess.run(["git", "-C", REPO_PATH, "add", "."])
    subprocess.run(["git", "-C", REPO_PATH, "commit", "-m", commit_message])
    subprocess.run(["git", "-C", REPO_PATH, "push", "origin", "main"])
    print("[✔] Push completed successfully!")

# Show Code
def show_code(code_response):
    s = input("Do you want to see the content generated by the model (Y/N) ")
    if s.lower() == 'y':
        print(code_response)

# Get Script Content
def get_script_content(prompt, llm, mode):
    print(f"[⏳] {mode} in progress...")
    response = llm.invoke(prompt)
    return response

# Generate Script
def generate_script(llm):
    prompt = """Generate a functional and interesting Python script for a complex algorithmic problem of your choice. Do not add any comments in the script. And do not add any superfluous text outside the Python script.
    Return only the response in this exact format:

    File name: $$$<script_name_without_extension>$$$
    Code:
    <script_content>
    """
    mode = "Generating Python script"
    code_response = get_script_content(prompt, llm, mode)
    return code_response, mode, prompt

# Fix Script
def fix_script(llm, script_content, random_file):
    prompt = f"""Fix the following Python script, return the complete code without adding any comments and superfluous text outside the Python script:
    {script_content}
    """
    mode = "Fixing Python script"
    code_response = get_script_content(prompt, llm, mode)
    return code_response, mode, random_file, prompt

# Generate Documentation
def generate_doc(llm, script_content, random_file):
    prompt = f"""Generate Markdown documentation for the following Python script, return the complete code without adding any comments and superfluous text outside the Python script:
    {script_content}
    """
    mode = "Generating documentation"
    code_response = get_script_content(prompt, llm, mode)
    file_name = random_file.replace(".py", ".md")
    return code_response, mode, file_name, prompt

# Main Function
def main():
    args = parse_arguments()

    if sum([args.generate, args.fix, args.doc, args.clean, args.update]) != 1:
        print("""❌ Please choose only one option among:
              -g, --generate : Generate a Python script
              -f, --fix : Fix an existing Python script
              -d, --doc : Generate documentation for a script
              -c, --clean : Push for repo cleanup
              -u, --update : Update the code generation model""")
        sys.exit(1)

    if args.clean:
        git_operations("[CLEAN] Cleanup of generated files")
    elif args.update:
        subprocess.run(['git', '-C', REPO_PATH, 'pull'])
        git_operations("[UPDATE] Update code generation")
    else:
        subprocess.run(["ollama", "pull", MODEL_NAME])
        time.sleep(2)
        subprocess.Popen(["ollama", "serve", MODEL_NAME])
        print("[✔] Model 'deepseek' ready!")

        llm = OllamaLLM(model=MODEL_NAME)
        if args.generate:
            code_response, mode, prompt = generate_script(llm)
        else:
            generated_files = os.listdir(os.path.join(REPO_PATH, "generated"))
            generated_files = [file for file in generated_files if not file.endswith(".md")]
            if not generated_files:
                print("[❌] No generated files found.")
                sys.exit(1)

            random_file = random.choice(generated_files)
            file_path = os.path.join(REPO_PATH, "generated", random_file)
            with open(file_path, "r") as f:
                script_content = f.read()

            if args.doc:
                code_response, mode, file_name, prompt = generate_doc(llm, script_content, random_file)
            elif args.fix:
                code_response, mode, file_name, prompt = fix_script(llm, script_content, random_file)

        while True:
            try:
                if args.generate or args.fix:
                    extension = ".py"
                    script_content_match = re.search(r'```python(.*?)```', code_response, re.DOTALL)
                else:
                    extension = ".md"
                    script_content_match = re.search(r'```markdown(.*)```', code_response, re.DOTALL)

                if script_content_match:
                    script_content = script_content_match.group(1).strip()
                    print("[✔] Script content found.")
                    break
                else:
                    print("[❌] Error: Script content not found.")
                    show_code(code_response)
                    r = input("Press Enter to exit or R to retry...")
                    if r.lower() == "r":
                        code_response = get_script_content(prompt, llm, mode)
                    else:
                        exit()
            except Exception as e:
                print(f"[❌] Error: {e}\nScript content not found.")
                show_code(code_response)
                r = input("Press Enter to exit or R to retry...")
                if r.lower() == "r":
                    code_response = get_script_content(prompt, llm, mode)
                else:
                    exit()

        if args.generate:
            try:
                file_name_line = re.search(r'\$\$\$(.*?)\$\$\$', code_response).group(1)
                script_name = file_name_line.replace(" ", "_").replace("-", "_")
            except Exception as e:
                print(f"[❌] Error with script name: {e}")
                show_code(code_response)
                script_name = input("Enter the script name: ")
            file_name = f"generated/{script_name}.{extension}"
            file_path = os.path.join(REPO_PATH, file_name)

        with open(file_path, "w") as f:
            f.write(script_content)

        print(f"[✔] File created: {file_path}")
        git_operations(f"{mode} {file_name}")

if __name__ == "__main__":
    main()
